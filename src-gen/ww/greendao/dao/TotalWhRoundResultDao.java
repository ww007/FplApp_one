package ww.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ww.greendao.dao.TotalWhRoundResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TOTAL_WH_ROUND_RESULT.
*/
public class TotalWhRoundResultDao extends AbstractDao<TotalWhRoundResult, Long> {

    public static final String TABLENAME = "TOTAL_WH_ROUND_RESULT";

    /**
     * Properties of entity TotalWhRoundResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property WhRoundResultID = new Property(0, Long.class, "WhRoundResultID", true, "WH_ROUND_RESULT_ID");
        public final static Property StudentCode = new Property(1, String.class, "studentCode", false, "STUDENT_CODE");
        public final static Property GradeCode = new Property(2, String.class, "gradeCode", false, "GRADE_CODE");
        public final static Property Sex = new Property(3, Integer.class, "sex", false, "SEX");
        public final static Property HItemCode = new Property(4, String.class, "hItemCode", false, "H_ITEM_CODE");
        public final static Property WItemCode = new Property(5, String.class, "wItemCode", false, "W_ITEM_CODE");
        public final static Property HResult = new Property(6, Integer.class, "hResult", false, "H_RESULT");
        public final static Property WResult = new Property(7, Integer.class, "wResult", false, "W_RESULT");
        public final static Property RoundNo = new Property(8, Integer.class, "RoundNo", false, "ROUND_NO");
        public final static Property TestTime = new Property(9, String.class, "TestTime", false, "TEST_TIME");
        public final static Property ResultState = new Property(10, Integer.class, "ResultState", false, "RESULT_STATE");
        public final static Property Mac = new Property(11, String.class, "Mac", false, "MAC");
    };


    public TotalWhRoundResultDao(DaoConfig config) {
        super(config);
    }
    
    public TotalWhRoundResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TOTAL_WH_ROUND_RESULT' (" + //
                "'WH_ROUND_RESULT_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: WhRoundResultID
                "'STUDENT_CODE' TEXT," + // 1: studentCode
                "'GRADE_CODE' TEXT," + // 2: gradeCode
                "'SEX' INTEGER," + // 3: sex
                "'H_ITEM_CODE' TEXT," + // 4: hItemCode
                "'W_ITEM_CODE' TEXT," + // 5: wItemCode
                "'H_RESULT' INTEGER," + // 6: hResult
                "'W_RESULT' INTEGER," + // 7: wResult
                "'ROUND_NO' INTEGER," + // 8: RoundNo
                "'TEST_TIME' TEXT," + // 9: TestTime
                "'RESULT_STATE' INTEGER," + // 10: ResultState
                "'MAC' TEXT);"); // 11: Mac
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TOTAL_WH_ROUND_RESULT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TotalWhRoundResult entity) {
        stmt.clearBindings();
 
        Long WhRoundResultID = entity.getWhRoundResultID();
        if (WhRoundResultID != null) {
            stmt.bindLong(1, WhRoundResultID);
        }
 
        String studentCode = entity.getStudentCode();
        if (studentCode != null) {
            stmt.bindString(2, studentCode);
        }
 
        String gradeCode = entity.getGradeCode();
        if (gradeCode != null) {
            stmt.bindString(3, gradeCode);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(4, sex);
        }
 
        String hItemCode = entity.getHItemCode();
        if (hItemCode != null) {
            stmt.bindString(5, hItemCode);
        }
 
        String wItemCode = entity.getWItemCode();
        if (wItemCode != null) {
            stmt.bindString(6, wItemCode);
        }
 
        Integer hResult = entity.getHResult();
        if (hResult != null) {
            stmt.bindLong(7, hResult);
        }
 
        Integer wResult = entity.getWResult();
        if (wResult != null) {
            stmt.bindLong(8, wResult);
        }
 
        Integer RoundNo = entity.getRoundNo();
        if (RoundNo != null) {
            stmt.bindLong(9, RoundNo);
        }
 
        String TestTime = entity.getTestTime();
        if (TestTime != null) {
            stmt.bindString(10, TestTime);
        }
 
        Integer ResultState = entity.getResultState();
        if (ResultState != null) {
            stmt.bindLong(11, ResultState);
        }
 
        String Mac = entity.getMac();
        if (Mac != null) {
            stmt.bindString(12, Mac);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TotalWhRoundResult readEntity(Cursor cursor, int offset) {
        TotalWhRoundResult entity = new TotalWhRoundResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // WhRoundResultID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // studentCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gradeCode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hItemCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wItemCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // hResult
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // wResult
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // RoundNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TestTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // ResultState
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // Mac
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TotalWhRoundResult entity, int offset) {
        entity.setWhRoundResultID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGradeCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHItemCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWItemCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHResult(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWResult(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setRoundNo(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTestTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setResultState(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMac(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TotalWhRoundResult entity, long rowId) {
        entity.setWhRoundResultID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TotalWhRoundResult entity) {
        if(entity != null) {
            return entity.getWhRoundResultID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
